pipeline {
    agent any
    tools {
        jdk 'jdk17'
        maven 'maven'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKER_REGISTRY = "madhunath"
        IMAGE_NAME = "react-project"
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        UNIQUE_IMAGE_TAG = "${IMAGE_NAME}:${BUILD_NUMBER}"
    }
    
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', changelog: false, poll: false, url: 'https://github.com/Madhunath/project1.git'
            }
        }
        
        stage('COMPILE') {
            steps {
                sh "mvn clean compile -DskipTests=true"
            }
        }
        
        stage('Sonarqube Analysis') {
            steps {
                sh """$SCANNER_HOME/bin/sonar-scanner -Dsonar.url=http://3.238.176.23:9000/ \
                -Dsonar.login=squ_85a77b978af467b81ef54204853cf5210edd06b9 -Dsonar.projectName=Shopping-app \
                -Dsonar.java.binaries=. -Dsonar.projectKey=Shopping-app"""
            }
        }
        
        stage('Build') {
            steps {
                sh "mvn clean package -DskipTests=true"
            }
        }
        
        stage('Docker Build & Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh "docker build -t ${UNIQUE_IMAGE_TAG} -f Dockerfile ."
                        sh "docker tag ${UNIQUE_IMAGE_TAG} ${DOCKER_REGISTRY}/${UNIQUE_IMAGE_TAG}"
                        sh "docker push ${DOCKER_REGISTRY}/${UNIQUE_IMAGE_TAG}"
                    }
                }
            }
        }
    
        stage('Docker Deploy to Container') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        // Stop and remove existing container if it exists
                        sh "docker ps -aqf name=${IMAGE_NAME} | xargs -r docker stop | xargs -r docker rm"
                        
                        // Remove old Docker images (force removal)
                        sh "docker images -q ${DOCKER_REGISTRY}/${IMAGE_NAME} | xargs -r docker rmi -f"
                        
                        // Deploy new Docker container
                        sh "docker run -d --name ${IMAGE_NAME} -p 3000:3000 ${DOCKER_REGISTRY}/${UNIQUE_IMAGE_TAG}"
                    }
                }
            }
        }
    }
}
